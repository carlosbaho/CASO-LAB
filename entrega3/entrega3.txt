Carlos Barcenas
Eric Casanovas


1.Comproveu que el programa proc.c funciona correctament per l'usuari root, però dóna l'error indicatanteriorment si l'executa un usuari no privilegiat (podeu usar l’usuari “demo”).

Podem executar-lo perfectament amb root i amb l'usuari demo salta l'error esperat.

2.Quin processador indica que tenim el programa proc.c? Busqueu a <mach/machine.h> els codis de“CPU Type” i “CPU Subtype”.

CPU Type 19 (CPU_TYPE_PENTIUMPRO) i CPU subtype 1 (CPU_SUBTYPE_AT386)

3.Expliqueu   les   altres   característiques   del   processador   que   mostra   proc.c.   Obtingueu-les   del   fitxer<mach/processor_info.h>; localitzeu-hi l’estructura processor_basic_info.

struct processor_basic_info {
        cpu_type_t      cpu_type;       /* type of cpu */
        cpu_subtype_t   cpu_subtype;    /* subtype of cpu */
/*boolean_t*/integer_t  running;        /* is processor running */
        integer_t       slot_num;       /* slot number */
/*boolean_t*/integer_t  is_master;      /* is this the master processor */
};

CPU Type 19
CPU Subtype 1
Running 1
Slot num 0
Is master 1

4.Comproveu   que   el   programa   memory-management.c   dóna   errors   al   compilar...   com   els   podeuarreglar? (pista: falta una coma (,) a la línia 60).Són clars els missatges d’error que dóna el compilador GCC en aquesta situació?

Ens indica la línea on està el problema. El missatge es clar. Afegim la coma i compila.

5.Un   cop   arreglat   el   problema   de   la   pregunta   anterior,   comproveu   que   el   programa   memory-management.c funciona correctament. Aquest programa usa  processor_info  i  vm_map  de forma intercalada, per demanar memòria 8 cops. L’ús de processor_info per demanar memòria queda foradel seu ús habitual, però funciona correctament. Responeu:

privileged ports: host 0x33  devices 0x34
0: Getting processors at array 0x0
        processors at array 0x1033000 (count 1)
        Writing to memory area... 0x1033000
0: Getting memory at location 0x0
        New vm_map memory at 0x12e3000
        Writing to memory area... 0x12e3000
1: Getting processors at array 0x0
        processors at array 0x12e5000 (count 1)
        Writing to memory area... 0x12e5000
1: Getting memory at location 0x0
        New vm_map memory at 0x12e6000
        Writing to memory area... 0x12e6000
2: Getting processors at array 0x0
        processors at array 0x12e8000 (count 1)
        Writing to memory area... 0x12e8000
2: Getting memory at location 0x0
        New vm_map memory at 0x12e9000
        Writing to memory area... 0x12e9000
3: Getting processors at array 0x0
        processors at array 0x12eb000 (count 1)
        Writing to memory area... 0x12eb000
3: Getting memory at location 0x0
        New vm_map memory at 0x12ec000
        Writing to memory area... 0x12ec000

	1.Quanta memòria assigna al procés cada crida a processor_info?

	4096 bytes, però el programa ens indica 1000 perquè està en hexadecimal. Tot i que la 1a ens dona desde 0x1033000 a 0x12e3000 però deu ser degut a que deu fer un malloc o un sbrk/brk i reserva més memoria de la que li hem demanat.

	2.Quanta memòria assigna al procés cada crida a vm_map? 
	
	8192 bytes, però el programa ens indica 2000 perquè està en hexadecimal.

	3.Quines adreces ens dóna el sistema en cada crida (processor_info i vm_map)? 

	Pel que fa al processor_info: 
		- &processor_lists[i]: la llista de processadors que existeixen al host_priv que li hem passat com a paràmetre.
		- &processor_listCnt: el nombre de ports retornats a la llista anterior.

	D'altra banda el vm_map:
		- &vm_address_t: l’adreça inicial per a l’objecte assignat.

	4.Són pàgines consecutives? (pista: us ajudarà, incrementar el número d’iteracions que fa el programa... per veure la seqüència d’adreces més clara)

	Si, son pàgines consecutives. Entre les crides de processor_info i de vm_map també es produeix aquest fet.

	5.Quines   proteccions   podem  demanar  a   l’assignar  memòria   a  un  procés  Mach?   (pista:  veieu  elfitxer <mach/vm_prot.h>)

	#define VM_PROT_READ    ((vm_prot_t) 0x01)      /* read permission */
	#define VM_PROT_WRITE   ((vm_prot_t) 0x02)      /* write permission */
	#define VM_PROT_EXECUTE ((vm_prot_t) 0x04)      /* execute permission */

	6.Canvieu el programa per a que la memòria demanada sigui de només lectura. Quin error us dónael sistema quan executeu aquesta nova versió del programa?

	Segmentation fault (core dumped), degut a que no podem escriure ja que li hem dit que només sigui de lectura i a l'hora d'escriure ens salta el segmentation fault.

	7.Després, afegiu una crida a vm_protect (...)   per tal de desprotegir la memòria per escriptura i que el programa torni a permetre les escriptures en la memòria assignada. Proveu la nova versió icomproveu que ara torna a funcionar correctament

	Afegim:

	 res = vm_protect (mach_task_self(), p, 8192, FALSE, VM_PROT_DEFAULT);
      if (res != KERN_SUCCESS) {
          printf ("Error getting memory with vm_protect(0x%x), %s\n", res,
                    mach_error_string(res));
          exit(1);
      }

    Després d'afegir aquest fragment de codi, tornem a fer una definició dels permisos, concedint permisos d'escriptura i de lectura.  



8.Feu   un   programa   que   creï   un   flux   (thread_create)   i   li   canviï   l'estat   (uesp,   eip)   amb   les   cridesthread_get_state i thread_set_state, per engegar-lo posteriorment (thread_resume).Trobareu els tipus genèrics (independents de l'arquitectura) relacionats amb el context d'un flux en elfitxer <mach/thread_status.h>. La informació específica de com és l'estat d'un thread en la nostraarquitectura i386 la trobareu a <mach/machine/thread_status.h>: struct i386_thread_state, i #definesi386_THREAD_STATE(flavor), i i386_THREAD_STATE_COUNT. Feu que el flux executi una funció amb un bucle infinit i comproveu amb el 'top' que està consumintprocessador (el meu top diu %CPU 0.0, però el programa - thread - es situa dalt de tot), abans dedestruir-lo (thread_terminate):
Ara feu que el thread faci un printf(...). Per què us dóna un "bus error"? Podeu esbrinar què passa?

(gdb) x/10i $eip
=> 0x105d29c:   ret    
   0x105d29d:   xchg   %ax,%ax
   0x105d29f:   nop
   0x105d2a0 <mach_reply_port>: mov    $0xffffffe6,%eax
   0x105d2a5 <mach_reply_port+5>:       lcall  $0x7,$0x0
   0x105d2ac <mach_reply_port+12>:      ret    
   0x105d2ad:   xchg   %ax,%ax
   0x105d2af:   nop
   0x105d2b0 <mach_thread_self>:        mov    $0xffffffe5,%eax
   0x105d2b5 <mach_thread_self+5>:      lcall  $0x7,$0x0

(gdb) x/10x $esp
0x1030c9c:      0x0105da46      0x00000000      0x00000502      0x00000000
0x1030cac:      0x00000000      0x00000048      0x00002710      0x00000000
0x1030cbc:      0x00020046      0x0002f000

Observem que el ret ens retorna a la posició de memoria 0x0105da46 que és invalida ja que no es multiple de 4 per aquesta raó ens salta un bus error degut a que tenim un invalid address alignment.



9.Observar que en el fitxer <mach.h> tenim dues definicions de funcions interessants per resoldre el problema de la pregunta anterior:
... però cap de les dues soluciona el problema... podeu determinat per què no funcionen?

La comanda kern_return_t mach_setup_tls (thread_t thread); si que funciona ja que reserva la memoria que necesitem. L'altra comanda no ens serveix pel nostre cas.



10.Feu   un   programa   que   creï   una   task   (task_create   /   task_terminate),   i   li   doni   memòria(vm_allocate), per després copiar-li una pàgina de dades (vm_write).Si heu fet la comanda 'mps' (de l'apartat 3), comproveu que la vostra task només té la memòria que li heu donat, haurieu d'obtenir una informació com:
	virtual size 16384    # si li heu demanat 16KB (4 pàgines)    
	resident size 0
Comproveu que amb la comanda 'ps' aquesta task també es veu: $ ps -e -o pid,stat,sz,rss,args

La nostra sortida del ps mostra que s'ha reservat correctament els 16kb de memòria.
621 S<o   174M 1.79M /hurd/console
751 p      16K    0  -
625 S<fo  191M 6.16M /bin/console --daemonize -d current_vcs -c /dev/vcs -d



12.Feu un programa que creï un procés amb fork() i faci que pare i fill es comuniquin amb un missatgede Mach, usant mach_msg_send() i mach_msg_receive().

Codi al tar, ho hem intentat però no ens funciona del tot :(