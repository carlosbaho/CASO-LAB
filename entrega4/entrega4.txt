1.Determineu les diferències entre les crides gettimeofday(...) i clock_gettime(...).

clock_gettime provides nanosecond resolution, is monotonic. I believe the 'seconds' and 'nanoseconds' are stored separately, each in 32-bit counters. 

gettimeofday() returns the wall-clock time with (nominally) µs precision. On my system this clock does seem to have µs precision, but this is not guaranteed, because "the resolution of the system clock is hardware dependent". POSIX.1-2008 says that. "Applications should use the clock_gettime() function instead of the obsolescent gettimeofday() function", so you should stay away from it. 

2.Comproveu que  getclock.c  i  getclock-syscall.c  tenen un comportament diferent respecte a l’ús decrides a sistema. Quina és la causa? Pista: veieu la pàgina de manual de vdso (7). Quina eina podeuusar per determinar les crides a sistema que fan els programes?

Que en el programa getclock.c, la crida clock_gettime(), és del tipus vdso. I això implica que es fa un crida a una regió de memòria ubicada al espai d'usuari on tenim funcionalitats del kernel d'una manera segura. En canvi en l'altre codi, la crida SYS_clock_gettime, es una syscal, i aixó implica accedir al kernel, i cambiar al context.

Amb la comanda strace -p [PID]

3. Escriviu un programa que calculi el temps que triga una crida a sistema senzilla. Per exemple, lessegüents   són   interessants.   Podeu   basar   el   vostre   programa   en   el   codi   getclock.c   que   usproporcionem, simplement substituint la crida a usleep(...) per la nova crida que volgueu provar:

El màxim inc és aproximadament 4500000 amb un for de 10000000.

4.Feu una taula amb els temps d'execució que obteniu a la pregunta 3. Per què els temps d'execuciósón tan diferents? Indiqueu també si es fan totes les crides a sistema o s’estalvien (pregunta 4):
Tot ho hem fet amb 10000000 iteracions excepte fork amb 10000 perque sino trigava moltissim.

Syscall					sbrk(0)			sbrk(inc)		sched_yield()		getpid()		fork/waitpid
Execution time		    73.5			 	2050			3350				1875			1200
(in microsecs.)
OS is actually		      no               yes               yes               yes               yes
called (yes/no)

6. Si executeu el programa com a administradors (root), obteniu alguna diferència en els resultats? 
No trobem una diferencia de temps significativa.

8. Useu les eines del sistema vmstat i iostat per veure el bandwidth obtingut en lectura i escriptura de fitxers  quan executeu els  programes  write-to-disk i read-from-disk, per separat  i alhora. Per una
mida concreta (p. ex. 500 Mb), coincideixen amb els vostres números?
No coincideixen les del programa 1 tot i que les del programa 2 per les escriptures si. Pel que fa les lectures si que concorden mes o menys.
